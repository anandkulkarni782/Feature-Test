*******************************************JAVA-STRING****************************************************

@] String :-

* String in java is sequence of characters
* Strings are immutable, Once created cannot be changed.

@] Ways To Create String

* There are two ways to create string in java

  1] Using String Literal

  String str = "Anand";

  2] Using New Keyword;

  String str = new String("Anand");

  3] Using String Builder and String Buffer for Modification.


@] Memory Management for Strings in Java

Java handles String memory efficiently using two main areas:

1️⃣ String Pool (String Constant Pool - SCP)

 - Stored in the heap but separately managed by JVM.
 - When you create a string using literals, JVM first checks if it already exists in the pool.
 - If it exists, reference is reused (no new object is created).
 - If it doesn’t exist, JVM creates a new object in the pool.

 String s1 = "Java";
 String s2 = "Java";  // Reuses the same object from SCP

 System.out.println(s1 == s2);  // true (same reference)



2️⃣ Heap Memory

 - When you use new String(), JVM always creates a new object in the heap.
 - Even if the same value exists in SCP, a separate object is made in heap memory.

 String s1 = new String("Java");  // Create on heap obj--1
 String s2 = new String("Java");  // Create on heap obj--2

 System.out.println(s1 == s2);  // false (Different objects in heap)



@] String Functions :-

@] toCharArray() :- To convert String to char Array.

@] ReplaceAll()

1] length() :-   Returns string length

2] concat() :-  	Joins two strings

3] charAt(index) :- Gets a character at a specific position

4] substring(start, end)	Extracts part of a string

5] equals(str)	Compares two strings (case-sensitive) The equals() method in Java is used to compare two strings for content equality.
                It checks whether two strings have the same sequence of characters.

6] equalsIgnoreCase(str)	Compares two strings (ignores case)

7] compareTo(str)	Compares two strings lexicographically- Dictionary Order. It will Return True or false.

8] contains(str)	Checks if a string contains a substring, We have to pass substring in contains  method.

9] startsWith(str)	Checks if a string starts with a substring

10] endsWith(str)	Checks if a string ends with a substring

11] replace(old, new)	Replaces part of the string

12] toUpperCase()	Converts the string to uppercase

13] toLowerCase()	Converts the string to lowercase

14] split(delimiter)	Splits the string into an array


trim()	Removes spaces from both ends

valueOf(value)	Converts other types to string

intern()	Moves a string to the String Pool (SCP)




*********************************STRING BUFFER AND STRING BUILDER****************************************


@] STRING BUFFER :-

String buffer is mutable sequence of characters, Unlike string which is immutable.
String Buffer allows modifications like append, reverse, replacing and deleting. It is threadSafe

2. Why Use StringBuffer?
Mutable – Can modify content without creating new objects.

Efficient for String Manipulation – Faster than String when frequent modifications are needed.

Thread-Safe – Methods are synchronized, making it safe for multi-threaded environments.


String Buffer Methods:

   1] append() :- It will modify the string and will add new string content.
   2] insert() :- It will insert the new sting at given index.
   3] replace() :- we need to provide index start and end  where we need to paste our string.
   4] reverse () :- It will reverse the existing string without creating new string.

public class StringBufferExample {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        sb.append(" World");
        sb.insert(6, "Java ");
        sb.replace(6, 10, "Everyone");
        sb.reverse();
        System.out.println(sb); // Output: "dlroW enoyrevE"
    }
}





*************************************STRING-BUILDER*********************************

STRING BUILDER :-

StringBuilder is a mutable sequence of characters like StringBuffer,
but it is not synchronized, making it faster than StringBuffer in single-threaded environments.



2. Why Use StringBuilder?
✅ Faster than StringBuffer (no synchronization overhead).
✅ Efficient for string modifications (append, insert, delete, replace).
✅ Similar to StringBuffer, but better for single-threaded use cases.

public class StringBuilderExample {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        sb.append(" World");
        sb.insert(6, "Java ");
        sb.replace(6, 10, "Everyone");
        sb.reverse();
        System.out.println(sb); // Output: "dlroW enoyrevE"
    }
}







